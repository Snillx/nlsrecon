#!/bin/bash

# Colours

# Regular Colors

Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White
NC='\033[0m'

# Bold Colors

BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
Bl='\033[1;34m'           # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline Colors

UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Options
SHORT_OPTS="d:D:h:H:v:V:o:O"
LONG_OPTS="domain,output,verbose,help:"

VERBOSE=false

############################################################
# Functions                                                #
############################################################

Banner()
{
echo -e " "
echo -e " ███▄    █  ██▓      ██████     ██▀███  ▓█████  ▄████▄   ▒█████   ███▄    █ "
echo -e " ██ ▀█   █ ▓██▒    ▒██    ▒    ▓██ ▒ ██▒▓█   ▀ ▒██▀ ▀█  ▒██▒  ██▒ ██ ▀█   █ "
echo -e "▓██  ▀█ ██▒▒██░    ░ ▓██▄      ▓██ ░▄█ ▒▒███   ▒▓█    ▄ ▒██░  ██▒▓██  ▀█ ██▒"
echo -e "▓██▒  ▐▌██▒▒██░      ▒   ██▒   ▒██▀▀█▄  ▒▓█  ▄ ▒▓▓▄ ▄██▒▒██   ██░▓██▒  ▐▌██▒"
echo -e "▒██░   ▓██░░██████▒▒██████▒▒   ░██▓ ▒██▒░▒████▒▒ ▓███▀ ░░ ████▓▒░▒██░   ▓██░"
echo -e "░ ▒░   ▒ ▒ ░ ▒░▓  ░▒ ▒▓▒ ▒ ░   ░ ▒▓ ░▒▓░░░ ▒░ ░░ ░▒ ▒  ░░ ▒░▒░▒░ ░ ▒░   ▒ ▒ "
echo -e "░ ░░   ░ ▒░░ ░ ▒  ░░ ░▒  ░ ░     ░▒ ░ ▒░ ░ ░  ░  ░  ▒     ░ ▒ ▒░ ░ ░░   ░ ▒░"
echo -e "   ░   ░ ░   ░ ░   ░  ░  ░       ░░   ░    ░   ░        ░ ░ ░ ▒     ░   ░ ░ "
echo -e "         ░     ░  ░      ░        ░        ░  ░░ ░          ░ ░           ░ ${BBlack}Made by ${NC}${Blue}@snillx ${NC}${BRed}<3 ${NC}"
echo -e " "
}

Help()
{
   echo -e "${BYellow}Usage:${BWhite} nlsrecon ${BYellow}{options}"
   echo -e " "
   echo -e "${BYellow}Options:${NC}"
   echo -e " "
   echo -e " ${BCyan}-d, --domain                          ${BWhite}Target domain.${NC} ${BYellow}Ex: \"site.com\""
   echo -e " ${BCyan}-o, --output                          ${BWhite}File name to save output. ${BYellow}Ex: \"site-subs.txt\""
   echo -e " ${BCyan}-v, --verbose                         ${BWhite}Show all running tasks. ${BYellow}Ex: -d site.com -v"
}

hide_commands()
{
   if $VERBOSE; then
        "$@"
   else
        "$@" > /dev/null 2>&1
   fi
}

############################################################
# Variables                                                #
############################################################

Banner

############################################################
# Argument Processing                                      #
############################################################

DOMAIN=""

# Process arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|-H|--help)
            Help
            exit
            ;;
        -d|-D|--domain)
            if [[ -n "$2" ]]; then
                DOMAIN="$2"
            shift 2
            else
                clear
                Banner
                echo -e "${BYellow}The ${BCyan}-d ${BYellow}option requires a domain name. Ex: amazon.com"
                exit 1
            fi
            ;;
        -o|-O|--output)
            if [[ -n "$2" ]]; then
                OUTPUT_FILE="$2"
                shift 2
            else
                clear
                Banner
                echo -e "${BYellow}The ${BCyan}-o ${BYellow}option requires a ${BCyan}file name${BYellow}. Ex: amazon-subs.txt"
                exit 1
            fi
            ;;
        -v|-V|--verbose)
            VERBOSE=true
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
                echo -e "${BRed}Invalid option:${NC} $1"
            exit 1
            ;;
    esac
done

# Domain verification
if [[ -z "$DOMAIN" ]]; then
    echo -e " ${BYellow} Please provide a domain using the ${BCyan}-d${BYellow} or ${BCyan}--domain ${BYellow}option.\n \n  ${BYellow}EX: nlsrecon.sh -d example.com"
    echo -e " "
    exit 1
fi

############################################################
# Subdomain Enumeration                                    #
############################################################

echo -e " "

echo -e " ${Bl}Gathering subdomains with subfinder..."
hide_commands subfinder -d "$DOMAIN" -all -o "subfinder-$DOMAIN.txt"

echo -e " "

echo -e " ${Bl}Gathering subdomains with findomain..."
hide_commands findomain --output -t "$DOMAIN"

echo -e " "

echo -e " ${Bl}Gathering subdomains with assetfinder..."
hide_commands assetfinder -subs-only "$DOMAIN" > "assetfinder-$DOMAIN.txt"

echo -e " "

echo -e " ${Bl}Merging all obtained subdomains..."

if [[ -f "$DOMAIN.txt" ]]; then
    cat "$DOMAIN.txt" "subfinder-$DOMAIN.txt" "assetfinder-$DOMAIN.txt" >> "subdomains-$DOMAIN.txt"
else
    echo -e "Warning: File $DOMAIN.txt not found. Continuing with the other files."
    cat "subfinder-$DOMAIN.txt" "assetfinder-$DOMAIN.txt" >> "subdomains-$DOMAIN.txt"
fi

echo -e " "

echo -e " ${Bl}Checking all valid subdomains..."
hide_commands httpx-toolkit -l "subdomains-$DOMAIN.txt" -sc -title -td -mc 200,302,403,401 -o "$DOMAIN-subs.txt"

echo -e " "

echo -e " ${BGreen}All subdomains have been processed!"

if [[ -n "$OUTPUT_FILE" ]]; then
    mv "$DOMAIN-subs.txt" "$OUTPUT_FILE"
fi

echo -e " "

echo -e " ${BYellow}Would you like to see the total number of subdomains? (Y/n)? (press enter to continue with Y)"
read response1

if [[ -n "$OUTPUT_FILE" ]]; then
    if [ "$response1" != "${response1#[nN]}" ] ;then
        echo -e " "
    else
        echo -e "${BYellow}Total number of subdomains:${BCyan}"
        cat "$OUTPUT_FILE" | wc -l
    fi
fi

if [[ -z "$OUTPUT_FILE" ]]; then
    if [ "$response1" != "${response1#[nN]}" ] ;then
        echo -e " "
    else
        echo -e "Total number of subdomains:"
        cat "$DOMAIN-subs.txt" | wc -l
    fi
fi

echo -e " "

echo -e " ${BYellow}Would you like to display the subdomains in your terminal? (Y/n)? (press enter to continue with Y)"
echo -e " "

read response2

if [[ -n "$OUTPUT_FILE" ]]; then
    if [ "$response2" != "${response2#[nN]}" ] ;then
        echo -e " "
    else
        cat "$OUTPUT_FILE"
    fi
fi

if [[ -z "$OUTPUT_FILE" ]]; then
    if [ "$response2" != "${response2#[nN]}" ] ;then
        echo -e " "
    else
        cat "$DOMAIN-subs.txt"
    fi
fi

echo -e " "

echo -e " ${BYellow}Do you want to remove intermediate files? (Y/n)? (press enter to continue with Y)"
read response3

if [ "$response3" != "${response3#[nN]}" ] ;then
    echo -e " "
else
    rm -f $DOMAIN.txt subfinder-$DOMAIN.txt assetfinder-$DOMAIN.txt subdomains-$DOMAIN.txt
    echo -e "${Yellow}Files have been removed."
    echo -e " "
fi

echo -e "${BBlack}Made with love by ${BWhite}Snillx ${BRed}<3"
echo -e " "
